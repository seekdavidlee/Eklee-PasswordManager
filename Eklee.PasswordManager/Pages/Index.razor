@page "/"
@using Eklee.PasswordManager.Core
@using Microsoft.Identity.Web
@using Microsoft.Extensions.Logging
@inject ClipboardService ClipboardService
@inject ISecretsService SecretsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ILogger<Index> Logger
@inject IJSRuntime JSRuntime
@code{

	private string TokenMessage;
	private List<SecretItem> _secrets;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var state = await this.AuthenticationStateProvider.GetAuthenticationStateAsync();
			if (state.User.Identity.IsAuthenticated)
			{
				_secrets = (await SecretsService.ListSecrets(state.User)).ToList();
			}
		}
		catch (Exception e)
		{
			try
			{
				ConsentHandler.HandleException(e);
			}
			catch (Exception e2)
			{
				Logger.LogError(e2, "Error in consent handler.");
			}

			TokenMessage = e.Message;
		}
	}

	private async Task CopyToClipboard(SecretItem item)
	{
		string secret = null;
		try
		{
			secret = await SecretsService.GetValue(item.Name);
			await ClipboardService.WriteTextAsync(secret);
			item.Copied = true;
		}
		catch (Exception e)
		{
			if (secret != null)
			{
				item.Value = secret;
				item.ShowInput = true;
			}
			else
			{
				TokenMessage = e.Message;
			}

		}
	}

	private void DoneCopy(SecretItem item)
	{
		item.Value = null;
		item.ShowInput = false;
	}

	private async Task SwitchEditContext(SecretItem item)
	{
		if (item.SwitchEditContext() == SecretItemEditMode.Edit)
		{
			await JSRuntime.InvokeVoidAsync($"focusElement", item.InputId);
		}
	}

	private async Task SaveChanges(SecretItem item)
	{
		var state = await this.AuthenticationStateProvider.GetAuthenticationStateAsync();
		await SecretsService.Save(item, state.User);
	}
}
<h1>Secrets</h1>
<div>@TokenMessage</div>
<table class="table">
	<thead>
		<tr>
			<th>Name</th>
			<td></td>
			<td></td>
		</tr>
	</thead>
	<tbody>

		@if (_secrets != null)
		{
			foreach (var item in _secrets)
			{
				<tr>
					<td>
						<div class="@item.DivClass1" @onclick="async () => await SwitchEditContext(item)">@item.DisplayName</div>
						<div class="@item.DivClass2"><input id="@item.InputId" class="form-control" type="text" value="@item.DisplayName" @onchange="async (ChangeEventArgs e)=> { item.DisplayName = e.Value.ToString(); await SaveChanges(item); }" @onblur="async () => await SwitchEditContext(item)"></div>
					</td>
					<td>
						<button type="button" class="btn btn-primary" @onclick="async () => await CopyToClipboard(item)">Copy to Clipboard</button>
					</td>
					<td>
						@{
							if (item.Copied)
							{
								<div>Copied!</div>
							}
						}
					</td>
				</tr>

				if (item.ShowInput)
				{
					<tr><td colspan="3">Unable to copy. Please select and copy from below.</td></tr>
					<tr>
						<td colspan="3">
							<input class="form-control" type="text" value="@item.Value" disabled>
						</td>
					</tr>
					<tr>
						<td colspan="3">
							<button type="button" class="btn btn-primary" @onclick="() => DoneCopy(item)">Done</button>
						</td>
					</tr>
				}
			}
		}

	</tbody>

</table>