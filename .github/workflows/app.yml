on: 
  push:
  workflow_dispatch:
    inputs:
      environmentselector:
        description: 'Environment selector'     
        required: false
        default: 'default'

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment Setp
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '' -or $envSelector -eq 'default') {            
            if ('${{ github.ref }}' -eq 'refs/heads/main') { 
              echo "::set-output name=build_env::prod"
              echo "::set-output name=skip_functional_test::true" 
            } else {
              echo "::set-output name=build_env::dev"
              echo "::set-output name=skip_functional_test::false" 
            }
          } else {
            echo "::set-output name=build_env::$envSelector"
            echo "::set-output name=skip_functional_test::true" 
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}
      skip_functional_test: ${{ steps.setup.outputs.skip_functional_test }}

  build_deploy_password_manager:
    name: Build, Deploy Password Manager Job
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET SDK 5.0.x
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - id: unittest
        name: Unit Tests
        run: |
            $unitTestFilePath = "${{ env.RUNNER_TEMP }}\TestResults\unittests.xml"
            dotnet test --logger "junit;LogFilePath=$unitTestFilePath" --filter TestCategory=unit

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Build Azure environment template
        run: az bicep build --file Deployment/deploy.bicep

      - name: Build Azure environment resources and deploy app
        uses: azure/powershell@v1
        with:
          inlineScript: >
            Deployment\Deploy.ps1 
            -StackName ${{ secrets.STACKNAME }} 
            -Location ${{ secrets.LOCATION }}
            -AppEnvironment ${{ secrets.APP_ENVIRONMENT }}
            -Branch ${{ github.ref }}
            -KeyVaultName ${{ secrets.KEY_VAULT_NAME }}
            -DeployResourceGroupName ${{ secrets.DEPLOY_RESOURCE_GROUP_NAME }}
            -KeyVaultResourceGroupName ${{ secrets.KEY_VAULT_RESOURCE_GROUP_NAME }}
            -Domain ${{ secrets.DOMAIN }}
            -ClientId ${{ secrets.CLIENT_ID }}
            -ClientSecret ${{ secrets.CLIENT_SECRET }}
          azPSVersion: "latest"

      - id: testresults
        if: ${{ needs.setup.outputs.skip_functional_test == 'false' }}
        name: Functional Tests
        run: Deployment\Test.ps1 -StackName ${{ secrets.STACKNAME }} -TenantId ${{ secrets.TENANT_ID }} -ReportDirectory "${{ env.RUNNER_TEMP }}\TestResults" -TestConfig "${{ secrets.TEST_CONFIG }}"

      - name: Publish test results
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: ${{ env.RUNNER_TEMP }}/TestResults/*.xml

      - name: Teardown Azure environment resources (except production)
        if: ${{ needs.setup.outputs.skip_functional_test == 'false' && success() }}
        uses: azure/powershell@v1
        with:
          inlineScript: >
            Deployment\Teardown.ps1 
            -StackName ${{ secrets.STACKNAME }}
            -DeployResourceGroupName ${{ secrets.DEPLOY_RESOURCE_GROUP_NAME }}
          azPSVersion: "latest"
